/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Helper.Helper;
import Model.Appointment;
import Model.Clinic;
import Model.Doctor;
import Model.ExpertDoctor;
import Model.Patient;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author furka
 */
public class PatientGUI extends javax.swing.JFrame {

    private DefaultTableModel clinicModel = null;
    private DefaultTableModel doctorModel = null;
    private DefaultTableModel whourModel = null;
    private DefaultTableModel apointModel = null;

    private Object[] doctorData = null;
    private Object[] clinicData = null;
    private Object[] whourData = null;
    private Object[] apointData = null;

    private Patient patient;
    private Doctor doctor = new Doctor();
    private Appointment appoint = new Appointment();
    private static Clinic clinic = new Clinic();

    public PatientGUI(Patient patient) throws SQLException {
        initComponents();
        this.patient = patient;

        // --------------Clinic Model------------------------
        clinicModel = new DefaultTableModel();
        clinic_list.setModel(clinicModel);
        clinicModel.setColumnIdentifiers(new String[]{"ID", "Clinic Name"});
        TableColumn column = clinic_list.getColumnModel().getColumn(0);
        column.setPreferredWidth(15);

        clinicData = new Object[2];

        for (int i = 0; i < clinic.getlist().size(); i++) {
            clinicData[0] = clinic.getlist().get(i).getId();
            clinicData[1] = clinic.getlist().get(i).getName();
            clinicModel.addRow(clinicData);
        }

        // --------------- Doctor Model -------------------------
        doctorModel = new DefaultTableModel();
        table_doctor.setModel(doctorModel);
        doctorModel.setColumnIdentifiers(new Object[]{"ID", "Name"});
        TableColumn column1 = table_doctor.getColumnModel().getColumn(0);
        column1.setPreferredWidth(15);
        doctorData = new Object[2];

        // ------------- Whour Model --------------------------
        whourModel = new DefaultTableModel();
        table_Whour.setModel(whourModel);
        whourModel.setColumnIdentifiers(new Object[]{"Name", "Working Hours"});
        TableColumn column2 = table_Whour.getColumnModel().getColumn(0);
        column2.setPreferredWidth(35);
        whourData = new Object[2];

        // ------------- Appointment Model --------------------------
        apointModel = new DefaultTableModel();
        table_appiontment.setModel(apointModel);
        apointModel.setColumnIdentifiers(new Object[]{"Id", "Doktor Name", "Date"});
        apointData = new Object[3];

        for (int i = 0; i < appoint.getPatientlist(patient.getId()).size(); i++) {
            apointData[0] = appoint.getPatientlist(patient.getId()).get(i).getId();
            apointData[1] = appoint.getPatientlist(patient.getId()).get(i).getDoctor_name();
            apointData[2] = appoint.getPatientlist(patient.getId()).get(i).getApmnt_date();
            apointModel.addRow(apointData);
        }

        // ------------- welcome text -------------------------
        jLabel1.setText("Wellcome, dear " + patient.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_doctor = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        clinic_list = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_Whour = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btn_selectDoctor = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_appointment = new javax.swing.JButton();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_appiontment = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel1.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel1.setkStartColor(new java.awt.Color(204, 0, 204));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("EXIT");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Wellcome, dear ");

        jTabbedPane1.setBackground(new java.awt.Color(204, 0, 204));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        kGradientPanel2.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel2.setkStartColor(new java.awt.Color(204, 0, 204));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Doctor List");

        table_doctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table_doctor);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Clinic Name");

        clinic_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        clinic_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clinic_listMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(clinic_list);

        table_Whour.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(table_Whour);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Doctor Working Hours");

        btn_selectDoctor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_selectDoctor.setText("Select");
        btn_selectDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectDoctorActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Select Doctor");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Appointment");

        btn_appointment.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_appointment.setText("Make an Appointment");
        btn_appointment.setPreferredSize(new java.awt.Dimension(75, 29));
        btn_appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_appointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btn_selectDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_appointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_selectDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_appointment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Appointment", kGradientPanel2);

        kGradientPanel3.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel3.setkStartColor(new java.awt.Color(204, 0, 204));

        table_appiontment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(table_appiontment);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("<===Cancel my appointment");

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(46, 46, 46))))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("My Appointment", kGradientPanel3);

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jTabbedPane1)
                .addGap(24, 24, 24))
        );

        getContentPane().add(kGradientPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        LoginGUI login = new LoginGUI();
        this.dispose();
        login.setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void clinic_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clinic_listMouseClicked
        // TODO add your handling code here:
        int selRow = clinic_list.getSelectedRow();
        String selClinic = clinic_list.getModel().getValueAt(selRow, 0) + "";
        DefaultTableModel clearModel = (DefaultTableModel) table_doctor.getModel();
        clearModel.setRowCount(0);
        int selClinicId = Integer.parseInt(selClinic);
        try {
            for (int i = 0; i < clinic.getClinicDoctorList(selClinicId).size(); i++) {
                doctorData[0] = clinic.getClinicDoctorList(selClinicId).get(i).getId();
                doctorData[1] = clinic.getClinicDoctorList(selClinicId).get(i).getName();
                doctorModel.addRow(doctorData);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_clinic_listMouseClicked

    private void btn_selectDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectDoctorActionPerformed
        // TODO add your handling code here:
        int selRow = table_doctor.getSelectedRow();
        if (selRow >= 0) {
            String selClinic = table_doctor.getModel().getValueAt(selRow, 0) + "";
            DefaultTableModel clearModel = (DefaultTableModel) table_Whour.getModel();
            clearModel.setRowCount(0);
            int selClinicId = Integer.parseInt(selClinic);
            try {
                for (int i = 0; i < doctor.getWhourList(selClinicId).size(); i++) {
                    whourData[0] = doctor.getWhourList(selClinicId).get(i).getDoctor_name();
                    whourData[1] = doctor.getWhourList(selClinicId).get(i).getW_date();
                    whourModel.addRow(whourData);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        } else {
            Helper.showMsg("Please, select a doctor!");
        }

    }//GEN-LAST:event_btn_selectDoctorActionPerformed

    // -------------- update the working hours in the table ---------------
    public void updateWhourModel(int doctor_id) {
        DefaultTableModel clearModel = (DefaultTableModel) table_Whour.getModel();
        clearModel.setRowCount(0);
        try {
            for (int i = 0; i < doctor.getWhourList(doctor_id).size(); i++) {
                whourData[0] = doctor.getWhourList(doctor_id).get(i).getDoctor_name();
                whourData[1] = doctor.getWhourList(doctor_id).get(i).getW_date();
                whourModel.addRow(whourData);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    // ---------------  Update Appointment Table  ------------------------
    public void updateApointModel(int patient_id) {
        DefaultTableModel clearModel = (DefaultTableModel) table_appiontment.getModel();
        clearModel.setRowCount(0);
        try {
            for (int i = 0; i < appoint.getPatientlist(patient_id).size(); i++) {
                apointData[0] = appoint.getPatientlist(patient_id).get(i).getId();
                apointData[1] = appoint.getPatientlist(patient_id).get(i).getDoctor_name();
                apointData[2] = appoint.getPatientlist(patient_id).get(i).getApmnt_date();
                apointModel.addRow(apointData);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }


    private void btn_appointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_appointmentActionPerformed

        // ------------------- variable assignment ------------------------
        int row = table_doctor.getSelectedRow();
        String selectDoctor = table_doctor.getModel().getValueAt(row, 0) + "";
        int selectDoctorId = Integer.parseInt(selectDoctor);
        String selectDoctorName = table_doctor.getModel().getValueAt(row, 1) + "";

        // -------------------- execution of code ------------------------
        int selRow = table_Whour.getSelectedRow();
        if (selRow >= 0) {
            String date = table_Whour.getModel().getValueAt(selRow, 1) + "";

            if (patient == null) {
                Helper.showMsg("Doctor or doctor name is null!");
            } else {
                boolean ctrl = patient.addAppoinment(selectDoctorId, selectDoctorName,
                        patient.getId(), patient.getName(), date);
                if (ctrl) {
                    Helper.showMsg("success");
                    patient.updateWhourStatus(selectDoctorId, date);
                    updateWhourModel(selectDoctorId);
                    updateApointModel(patient.getId());
                } else {
                    Helper.showMsg("error");
                }
            }
        } else {
            Helper.showMsg("Please, select a valid date!");
        }
    }//GEN-LAST:event_btn_appointmentActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selRow = table_appiontment.getSelectedRow();
        if (selRow >= 0) {
            String selectRow = table_appiontment.getModel().getValueAt(selRow, 0).toString();
            int selId = Integer.parseInt(selectRow);
            boolean ctrl;
            try {
                ctrl = patient.deleteAppointment(selId);
                if (ctrl) {
                    Helper.showMsg("success");
                    updateApointModel(patient.getId());
                } else {
                    Helper.showMsg("error");

                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        } else {
            Helper.showMsg("Please, select the row you want to delete!");
        }


    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_appointment;
    private javax.swing.JButton btn_selectDoctor;
    private javax.swing.JTable clinic_list;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JTable table_Whour;
    private javax.swing.JTable table_appiontment;
    private javax.swing.JTable table_doctor;
    // End of variables declaration//GEN-END:variables
}
